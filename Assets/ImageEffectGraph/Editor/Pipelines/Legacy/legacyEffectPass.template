Pass
{
    Name "Effect"

    // Material options generated by graph
${Culling}
${ZTest}
${ZWrite}
    HLSLPROGRAM

    // Required to compile gles 2.0 with standard srp library, BUT THIS IS LEGACY
    //#pragma prefer_hlslcc gles
    //#pragma exclude_renderers d3d11_9x
    //#pragma target 2.0
    
    #pragma vertex vert
    #pragma fragment frag

    // Defines generated by graph
${Defines}
    
    //Using this template assumes that shader graph and SRP core are imported.
    //#include "UnityCG.cginc"

    #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
    #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
    #include "UnityShaderUtilities.cginc"
    #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/UnityInstancing.hlsl"
    #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

    #ifndef TEXTURE2D
        #define TEXTURE2D(tex2D) UNITY_DECLARE_TEX2D_NOSAMPLER(tex2D)
    #endif
    #ifndef SAMPLER
        #define SAMPLER(samplerName) SamplerState samplerName
    #endif
    #ifndef SAMPLE_TEXTURE2D
        #define SAMPLE_TEXTURE2D(textureName, samplerName, coord2) textureName.Sample(samplerName, coord2)
    #endif

${Graph}
    struct GraphVertexOutput
    {
        float4 position : POSITION;

        // Interpolators defined by graph
${VertexOutputStruct}
        UNITY_VERTEX_OUTPUT_STEREO
    };

    GraphVertexOutput vert (GraphVertexInput v)
    {
        GraphVertexOutput o = (GraphVertexOutput)0;

//BUG: Keyword added from CS script is ignored.
#ifndef UNITY_POST_PROCESSING_STACK_V2
 #define UNITY_POST_PROCESSING_STACK_V2
#endif // UNITY_POST_PROCESSING_STACK_V2


#ifdef UNITY_POST_PROCESSING_STACK_V2
        o.position = float4(v.vertex.xy, 0.0, 1.0);
        o.uv0 = half4((v.vertex.xy + 1.0) * 0.5, 0, 0);
#if UNITY_UV_STARTS_AT_TOP
        o.uv0 = o.uv0 * half4(1.0, -1.0, 0, 0) + half4(0.0, 1.0, 0, 0);
#endif
#else
        o.position = UnityObjectToClipPos(v.vertex);
        o.uv0 = v.vertex;
#endif
        return o;
    }

    half4 frag (GraphVertexOutput IN ${FaceSign}) : SV_Target
    {
        // Pixel transformations performed by graph
${PixelShader}
        
        SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;
        // Surface description inputs defined by graph
${PixelShaderSurfaceInputs}

        SurfaceDescription surf = PopulateSurfaceData(surfaceInput);
        float3 Color = float3(0.5, 0.5, 0.5);
        // Surface description remap performed by graph
${PixelShaderSurfaceRemap}
        
        return half4(Color, 1);
    }
    ENDHLSL
}
