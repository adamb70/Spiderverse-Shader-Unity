Pass
{
    Name "Effect"

    // Material options generated by graph
${Culling}
${ZTest}
${ZWrite}
    HLSLPROGRAM

    #pragma target 4.5
    #pragma only_renderers d3d11 ps4 xboxone vulkan metal switch
    //#pragma enable_d3d11_debug_symbols
    
    #pragma vertex vert
    #pragma fragment frag

    // Defines generated by graph
${Defines}

    //Common API include
    #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
    #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
    #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/UnityInstancing.hlsl"
    #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

${Graph}
    struct GraphVertexOutput
    {
        float4 position : POSITION;

        // Interpolators defined by graph
${VertexOutputStruct}
        UNITY_VERTEX_INPUT_INSTANCE_ID
        UNITY_VERTEX_OUTPUT_STEREO
    };

    GraphVertexOutput vert (GraphVertexInput v)
    {
        GraphVertexOutput o = (GraphVertexOutput)0;

        o.position = float4(v.vertex.xy, 0.0, 1.0);
        o.uv0 = float4((v.vertex.xy + 1.0) * 0.5, 0, 0);
                
#if UNITY_UV_STARTS_AT_TOP
        o.uv0 = o.uv0 * float4(1.0, -1.0, 0, 0) + float4(0.0, 1.0, 0, 0);
#endif
        return o;
    }

    float4 frag (GraphVertexOutput IN ${FaceSign}) : SV_Target
    {
        UNITY_SETUP_INSTANCE_ID(IN);

        // Pixel transformations performed by graph
${PixelShader}
        
        SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;
        // Surface description inputs defined by graph
${PixelShaderSurfaceInputs}

        SurfaceDescription surf = PopulateSurfaceData(surfaceInput);
        float3 Color = float3(0.5, 0.5, 0.5);
        // Surface description remap performed by graph
${PixelShaderSurfaceRemap}
        
        return float4(Color, 1);
    }
    ENDHLSL
}
